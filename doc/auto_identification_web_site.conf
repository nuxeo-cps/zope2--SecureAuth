# $Id$

NameVirtualHost 192.168.2.20:80


<VirtualHost 192.168.2.20:80>
    ServerName www.mysite.net

    CustomLog /var/log/apache2/www.mysite.net-access.log combined

    RewriteEngine On
    RewriteLog /var/log/apache2/www.mysite.net-rewrite.log
    RewriteLogLevel 0
    #RewriteLogLevel 2
    #RewriteLogLevel 4

    # Redirecting users who want to authenticate securely to the HTTPS
    # access. This is because HTTPS is needed to process the secure
    # authentication.
    RewriteCond %{REQUEST_URI} ^/secure_auth.*
    RewriteRule ^/(.*) https://%{HTTP_HOST}/secure_auth [R=permanent,L]

    # Classical Zope proxying
    RewriteCond %{HTTP:Authorization}  ^(.*)
    RewriteRule ^/(.*) http://localhost:8080/VirtualHostBase/http/%{HTTP_HOST}:80/cps/VirtualHostRoot/$1 [P,L]
</VirtualHost>


<VirtualHost 192.168.2.20:443>
    ServerName www.mysite.net

    CustomLog /var/log/apache2/https-www.mysite.net-access.log combined
    # Use this following custom log to test the form of the SSL_CLIENT_S_DN
    #CustomLog /var/log/apache2/https-www.mysite.net-access.log \
    #"%t %h SSL_CLIENT_S_DN = %{SSL_CLIENT_S_DN}x | SSL_PROTOCOL = %{SSL_PROTOCOL}x | SSL_CIPHER = %{SSL_CIPHER}x"

    RewriteEngine On
    RewriteLog /var/log/apache2/https-www.mysite.net-rewrite.log
    #RewriteLogLevel 0
    #RewriteLogLevel 2
    RewriteLogLevel 4

    SSLEngine on
    # Make available the standard set of SSL related CGI/SSI environment
    # variables. Use this option with care since this information extraction
    # step is a rather expensive operation.
    SSLOptions +StdEnvVars +CompatEnvVars +ExportCertData +StrictRequire
    SSLCertificateFile /etc/httpd/conf/ssl.crt/www.mysite.net.crt
    SSLCertificateKeyFile /etc/httpd/conf/ssl.key/www.mysite.net.key
    SSLCACertificateFile /etc/httpd/conf/ssl.crt/cacert.pem
    # This file should be regurlarly (at least every day is a good option)
    # downloaded from the PKI pub interface, for example through a crontab 
    # script.
    #
    # The actual location of the CA certificate revocation list is:
    # http://pki.mysite.net/pub/crl/cacrl.pem
    #
    # Example to update the CRL file every day at 02h30 + 09h30:
    # 30 13 * * * wget --quiet --no-clobber http://pki.mysite.net/pub/crl/cacrl.pem \
    # --output-document=/etc/httpd/conf/ssl.crl/cacrl.pem
    # 30 3 * * * wget --quiet --no-clobber http://pki.mysite.net/pub/crl/cacrl.pem \
    # --output-document=/etc/httpd/conf/ssl.crl/cacrl.pem
    SSLCARevocationFile /etc/httpd/conf/ssl.crl/cacrl.pem

    <LocationMatch ^/secure_auth.*>
        SSLVerifyClient require

        # We only check the certificate against the PKI CA certificate
        # which is the direct certificate emitter. So this is a verification at
        # depth 1.
        SSLVerifyDepth  1

        # Bug apache2: it is needed to activate the RewriteEngine in the
        # container.
        RewriteEngine On

        # RewriteRule backreferences : $N
        # RewriteCond backreferences : %N
        #
        # Check the available variables in the following doc
        # http://httpd.apache.org/docs/2.0/mod/mod_ssl.html
        #
        # SSL_CLIENT_S_DN = Subject DN in client's certificate

        #######################################################################
        # Use this block if you want to use SSO through sending the uid in the
        # query.
        #######################################################################
        #
        # This cond prevents user to specify uid themselves
        RewriteCond %{QUERY_STRING} !secure_auth_uid=.*

        # First, this condition tests that the certificate subject DN
        # is of the expected form. If it does not, the RewriteRule will
        # not be executed.
        # Second, this condition retrieves the value of the uid.
        # SSL_CLIENT_S_DN is of the form /DC=net/DC=mysite/OU=people/UID=6423
        # and we only want to add the uid in the proxied query.
        #
        # For the SSL variables, one should use the special format (new with Apache2):
        # %{SSL:variable} where variable is the name of an SSL environment variable.
        #
        # [NC] = nocase, this makes the test case-insensitive and thus makes
        # the condition match for DN with upper or lower case like
        # DC=xxx,DC=xxx,OU=xxx,UID=xxx and dc=xxx,dc=xxx,ou=xxx,uid=xxx
        #
        RewriteCond %{SSL:SSL_CLIENT_S_DN} /dc=net/dc=mysite/ou=people/uid=(.*) [NC]

        # Classical Zope proxying
        RewriteRule ^/(.*) http://localhost:8080/VirtualHostBase/https/%{HTTP_HOST}:443/cps/VirtualHostRoot/secure_auth/certLogin?secure_auth_uid=%1 [P,L]

        #######################################################################
        # Use this block if you want to use SSO through HTTP headers.
        #######################################################################
        #
        #RequestHeader set "CLCRT" %{SSL_CLIENT_S_DN}
        #RewriteCond %{HTTP:Authorization}  ^(.*)
        #RewriteRule ^/(.*) http://www.mysite.net:8080/VirtualHostBase/https/%{HTTP_HOST}:443/cps-secureauth/VirtualHostRoot/$1 [P,L]

    </LocationMatch>

    # This condition is needed because otherwise the RewriteRule below is
    # evaluated before the RewriteRule enclosed in the LocationMatch block since
    # the LocationMatch block is evaluated (it seems) after the content of the
    # VirtualHost block.
    RewriteCond %{REQUEST_URI} !^/secure_auth.*
    RewriteCond %{HTTP:Authorization}  ^(.*)
    # Classical Zope proxying
    RewriteRule ^/(.*)  http://localhost:8080/VirtualHostBase/https/%{HTTP_HOST}:443/cps/VirtualHostRoot/$1 [P,L]

</VirtualHost>

# vim: se ft=apache:
